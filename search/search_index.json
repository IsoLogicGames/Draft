{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"\u00b6 Draft A Lua class library. Draft is an easy-to-use class library targeting Lemur and Roblox . Draft makes object oriented abstraction easy. - Build classes effortlessly - Create interfaces and abstract classes - Remove the complexity of abstraction Installation \u00b6 If your project is on a filesystem, just place the contents of the lib directory your project. Then, use a tool such as Rojo to sync Draft into your project. That's all. Simply require Draft to begin using it. For more detailed installation instructions, check out our getting started page. Using Draft \u00b6 Once Draft is installed, usage is very simple. Requiring Draft provides a straightforward API for all of Draft's functions and classes. local Draft = require(game:GetService(\"ReplicatedStorage\").Draft) -- TODO: Create a minimal example of usage Its that easy. Check out the user guide to learn more. Our API reference contains a complete reference for all of Draft's functions and classes.","title":"Home"},{"location":"#_1","text":"","title":""},{"location":"#installation","text":"If your project is on a filesystem, just place the contents of the lib directory your project. Then, use a tool such as Rojo to sync Draft into your project. That's all. Simply require Draft to begin using it. For more detailed installation instructions, check out our getting started page.","title":"Installation"},{"location":"#using-draft","text":"Once Draft is installed, usage is very simple. Requiring Draft provides a straightforward API for all of Draft's functions and classes. local Draft = require(game:GetService(\"ReplicatedStorage\").Draft) -- TODO: Create a minimal example of usage Its that easy. Check out the user guide to learn more. Our API reference contains a complete reference for all of Draft's functions and classes.","title":"Using Draft"},{"location":"getting-started/","text":"Getting Started \u00b6 Draft is designed to be easy to use. You shouldn't have to worry about what goes on in the background. It does, however, require some setup before you can start using it. Installation \u00b6 Draft is packaged to easily use the filesystem alongside Roblox or Lemur , however it isn't required. Using Rojo to sync is the easiest method and will get you started quickly. Using the Filesystem \u00b6 When using the filesystem the first step is to download Draft. The latest release can be downloaded via GitHub . Alternatively, if you'd like the latest developement changes or wish to contribute you can clone or create a submodule of the repository with git. git clone https://github.com/IsoLogicGames/Draft.git Rojo \u00b6 Rojo is the easiest and simplest way to install Draft. Start by installing Rojo . We recommend using Foreman or the Visual Studio Code extension . Once Rojo is installed just sync or build your project with Draft. Draft includes a default.project.json that you can use. It includes all of Draft, as well as its dependencies and tests. A more basic .project.json can also be used to sync Draft. { \"name\": \"Draft\", \"tree\": { \"$className\": \"DataModel\", \"ReplicatedStorage\": { \"$className\": \"ReplicatedStorage\", \"Draft\": { \"$path\": \"lib\" } } } } Lemur \u00b6 Draft is fully compatibile with Lemur . Draft uses Lemur for testing and this testing script can be used as an example. Lemur and Draft can both be loaded from a Lua script: package.path = package.path .. \";?/init.lua\" -- Lua installations may need this local Lemur = require(\"lemur\") local Habitat = Lemur.Habitat.new() local ReplicatedStorage = Habitat.game:GetService(\"ReplicatedStorage\") local Draft = Habitat:loadFromFs(\"lib\") -- lib is the root of Draft Draft.Parent = ReplicatedStorage Tip Lemur can't load from .project.json files, but can still load .lua files from the filesystem just like Rojo with Habitat:loadFromFs() . Alternatives \u00b6 Other syncing tools can be used for Draft provided they can build or sync *.lua files into a Roblox place or model file or directly with Roblox Studio. Important All .lua files in Draft are meant to be synced as a ModuleScript . Using Roblox \u00b6 Creating the scripts manually in Roblox Studio can replicate the work done by a sync tool such as Rojo without the need for any additional tooling or the use of the filesystem. Note In the future, Draft will release pre-built model packages that can be used with Roblox without any additional tooling or setup. In order to recreate the structure of the project manually within Roblox: Create a ModuleScript for the root Draft module wherever you'd like to use it from. Typically ReplicatedStorage is a good place for it. Name it Draft (or use whatever name you'd like, it doesn't matter!) and copy the contents of lib/init.lua into it. This will be what you require when you use Draft. Inside your root ModuleScript repeat each of th following steps for every script in Draft's lib/ directory (we already did lib/init.lua , so you can skip it): Create a new ModuleScript inside of the root ModuleScript . Name it whatever the file is named in Draft excluding the .lua file extension. E.g. for Example.lua simply call it Example . Draft looks for these names, so they do matter this time. Copy the contents of the file in Draft into the new ModuleScript . When you're done, the structure should look something like this, and you should be able to require Draft without any errors. |-- ReplicatedStorage | |-- Draft | | |-- Example | | |-- Example | | |-- Example | | |-- Example | | |-- ... Caution Using this method is very error prone at the moment. We recommend using a sync tool such as Rojo to avoid human error in the process. A sync tool can be used to sync with a blank project, then saved as a model, or copied into another project for cases where the rest of the project doesn't use the filesystem and it would be preferable to avoid syncing regularly. Usage \u00b6 Once Draft is installed, assuming its named Draft and is located in ReplicatedStorage , you can simply require it to start using it. local Draft = require(game:GetService(\"ReplicatedStorage\").Draft) Note We'll assume from here on that Draft has already been required.","title":"Getting Started"},{"location":"getting-started/#getting-started","text":"Draft is designed to be easy to use. You shouldn't have to worry about what goes on in the background. It does, however, require some setup before you can start using it.","title":"Getting Started"},{"location":"getting-started/#installation","text":"Draft is packaged to easily use the filesystem alongside Roblox or Lemur , however it isn't required. Using Rojo to sync is the easiest method and will get you started quickly.","title":"Installation"},{"location":"getting-started/#using-the-filesystem","text":"When using the filesystem the first step is to download Draft. The latest release can be downloaded via GitHub . Alternatively, if you'd like the latest developement changes or wish to contribute you can clone or create a submodule of the repository with git. git clone https://github.com/IsoLogicGames/Draft.git","title":"Using the Filesystem"},{"location":"getting-started/#rojo","text":"Rojo is the easiest and simplest way to install Draft. Start by installing Rojo . We recommend using Foreman or the Visual Studio Code extension . Once Rojo is installed just sync or build your project with Draft. Draft includes a default.project.json that you can use. It includes all of Draft, as well as its dependencies and tests. A more basic .project.json can also be used to sync Draft. { \"name\": \"Draft\", \"tree\": { \"$className\": \"DataModel\", \"ReplicatedStorage\": { \"$className\": \"ReplicatedStorage\", \"Draft\": { \"$path\": \"lib\" } } } }","title":"Rojo"},{"location":"getting-started/#lemur","text":"Draft is fully compatibile with Lemur . Draft uses Lemur for testing and this testing script can be used as an example. Lemur and Draft can both be loaded from a Lua script: package.path = package.path .. \";?/init.lua\" -- Lua installations may need this local Lemur = require(\"lemur\") local Habitat = Lemur.Habitat.new() local ReplicatedStorage = Habitat.game:GetService(\"ReplicatedStorage\") local Draft = Habitat:loadFromFs(\"lib\") -- lib is the root of Draft Draft.Parent = ReplicatedStorage Tip Lemur can't load from .project.json files, but can still load .lua files from the filesystem just like Rojo with Habitat:loadFromFs() .","title":"Lemur"},{"location":"getting-started/#alternatives","text":"Other syncing tools can be used for Draft provided they can build or sync *.lua files into a Roblox place or model file or directly with Roblox Studio. Important All .lua files in Draft are meant to be synced as a ModuleScript .","title":"Alternatives"},{"location":"getting-started/#using-roblox","text":"Creating the scripts manually in Roblox Studio can replicate the work done by a sync tool such as Rojo without the need for any additional tooling or the use of the filesystem. Note In the future, Draft will release pre-built model packages that can be used with Roblox without any additional tooling or setup. In order to recreate the structure of the project manually within Roblox: Create a ModuleScript for the root Draft module wherever you'd like to use it from. Typically ReplicatedStorage is a good place for it. Name it Draft (or use whatever name you'd like, it doesn't matter!) and copy the contents of lib/init.lua into it. This will be what you require when you use Draft. Inside your root ModuleScript repeat each of th following steps for every script in Draft's lib/ directory (we already did lib/init.lua , so you can skip it): Create a new ModuleScript inside of the root ModuleScript . Name it whatever the file is named in Draft excluding the .lua file extension. E.g. for Example.lua simply call it Example . Draft looks for these names, so they do matter this time. Copy the contents of the file in Draft into the new ModuleScript . When you're done, the structure should look something like this, and you should be able to require Draft without any errors. |-- ReplicatedStorage | |-- Draft | | |-- Example | | |-- Example | | |-- Example | | |-- Example | | |-- ... Caution Using this method is very error prone at the moment. We recommend using a sync tool such as Rojo to avoid human error in the process. A sync tool can be used to sync with a blank project, then saved as a model, or copied into another project for cases where the rest of the project doesn't use the filesystem and it would be preferable to avoid syncing regularly.","title":"Using Roblox"},{"location":"getting-started/#usage","text":"Once Draft is installed, assuming its named Draft and is located in ReplicatedStorage , you can simply require it to start using it. local Draft = require(game:GetService(\"ReplicatedStorage\").Draft) Note We'll assume from here on that Draft has already been required.","title":"Usage"},{"location":"user-guide/","text":"User Guide \u00b6 Attention User Guide coming soon!","title":"Introduction"},{"location":"user-guide/#user-guide","text":"Attention User Guide coming soon!","title":"User Guide"}]}